@using System.Data.SqlClient
@using Global5.Controllers.Configuration
@using System.Data
@using System.Diagnostics
@using iTextSharp.text
@using iTextSharp.text.pdf

<h3>Movimentação de estoque</h3>


<style>
.borda{
    border: solid
}
</style>

<div>
    <div style="float:left; width:30%">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        Material:
                        <select @bind="@intIdMaterial">
                            >

                            <option value=""></option>
                            @foreach (var itemMaterial in materialList)
                            {
                                <option value="@itemMaterial.int_id">@itemMaterial.int_id - @itemMaterial.str_descricao</option>
                            }
                        </select>

                        <button @onclick="(()=>SelecionaMaterial(intIdMaterial))" class="btn-secundary">Filtrar</button>
                        <button @onclick="(()=>RemoverFiltroMaterial())" class="btn-secundary">Limpar</button>
                        <button @onclick="(()=> GerarRelatorio())" class="btn-secondary">Relatório</button>
                        <button @onclick="(()=>CarregaMaterial(true))" class="btn-primary">Atualizar</button>

                        <br>
                        Quantidade:
                        <input placeholder="Desconto estoque" type="text" class="form-control mb-md-3" @bind="@movEstoqueCad.int_qtd_desconto" @bind:event="oninput" />

                    </td>
                </tr>
                <tr>
                    <td>
                        <button @onclick="(()=>CadastrarMovEstoque(0))" class="btn-primary">Remover</button>
                        <button @onclick="(()=>CadastrarMovEstoque(1))" class="btn-primary">Adicionar</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div style="float:right; width:70%; padding-left: 10px">
        <table border="1">
            <thead class="borda">
                <tr>
                    <th class="borda">ID Mov</th>
                    <th class="borda">Material</th>
                    <th class="borda">Estoque anterior </th>
                    <th class="borda">Estoque Alterado</th>
                    <th class="borda">Estoque Atual</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in movEstoqueList)
                {
                    <tr>
                        <td class="borda">@item.int_id</td>
                        <td class="borda">@item.str_material</td>
                        <td class="borda">@item.int_qtd_anterior</td>
                        <td class="borda">@item.int_qtd_desconto</td>
                        <td class="borda">@item.int_qtd_atual</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>


@code {
    private bool visibleEdit { get; set; } = true;
    private bool visibleAdd { get; set; } = false;
    private Models.crud.MovEstoque? movEstoqueCad { get; set; } = new Models.crud.MovEstoque();

    private List<Models.crud.Material>? materialList { get; set; } = new List<Models.crud.Material>();
    private int intIdMaterial = 0;


    private List<Models.crud.MovEstoque> movEstoqueList = new List<Models.crud.MovEstoque>();

    protected override async Task OnInitializedAsync()
    {
        CarregaMaterial();
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            movEstoqueList = new List<Models.crud.MovEstoque>();
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ConsultaMovEstoque", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("@int_id_material", null));
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    movEstoqueList.Add(new Models.crud.MovEstoque
                        {
                            int_id = (int)rdr["int_id"],
                            str_material = (string)rdr["str_material"],
                            int_material = (int)rdr["int_material"],
                            int_qtd_anterior = (int)rdr["int_qtd_anterior"],
                            int_qtd_desconto = (int)rdr["int_qtd_desconto"],
                            int_qtd_atual = (int)rdr["int_qtd_atual"],
                            int_estoque_incial = (int)rdr["int_estoque_incial"]
                        });
                }
            }
        }

        movEstoqueCad = new Models.crud.MovEstoque();
    }

    private void CadastrarMovEstoque(int tipoMov = 0)
    {
        visibleAdd = true;
        visibleEdit = false;
        var material = materialList?.Where(x => x.int_id == intIdMaterial).FirstOrDefault() ?? null;
        int? estoqueAtual = EstoqueAtual(intIdMaterial);

        if (estoqueAtual == null)
            estoqueAtual = material?.int_estoque_incial ?? 0;

        int? estoqueAposInsert = estoqueAtual - movEstoqueCad?.int_qtd_desconto;

        if (tipoMov == 1)
            estoqueAposInsert = estoqueAtual + movEstoqueCad?.int_qtd_desconto;

        if (estoqueAtual != null)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand("sp_CadastraMovEstoque", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("int_id_material", material?.int_id ?? 0));
                    cmd.Parameters.Add(new SqlParameter("int_qtde_desconto", movEstoqueCad?.int_qtd_desconto ?? 0));
                    cmd.Parameters.Add(new SqlParameter("int_qtd_atual", estoqueAposInsert ?? 0));
                    cmd.Parameters.Add(new SqlParameter("int_qtd_anterior", estoqueAtual));
                    cmd.ExecuteReader();
                }
            }
            catch { }


        }
        OnInitializedAsync();
    }

    private void DeleteMaterial(string id)
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ExcluiMaterial", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", id));
            cmd.ExecuteReader();
        }
        OnInitializedAsync();
    }


    protected int? EstoqueAtual(int idMAterial)
    {
        int? estoqueAtual = null;
        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ConsultaQtdeAtual", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id_material", idMAterial));
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    estoqueAtual = (int)rdr["int_qtd_Atual"];
                }
            }
            return estoqueAtual;
        }
    }

    protected void CarregaMaterial(bool atualizaMovEstoque = false)
    {
        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            materialList = new List<Models.crud.Material>();
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ConsultaMaterial", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    materialList.Add(new Models.crud.Material
                        {
                            int_id = (int)rdr["int_id"],
                            str_descricao = (string)rdr["str_descricao"],
                            dec_valor = (decimal)rdr["dec_valor"],
                            int_estoque_incial = (int)rdr["int_estoque_incial"]
                        });
                }
            }

            if (atualizaMovEstoque)
                OnInitializedAsync();
        }


    }

    public void SelecionaMaterial(int idMaterial)
    {
        OnInitializedAsync();
        movEstoqueList = movEstoqueList.Where(x => x.int_material == idMaterial).ToList();
    }

    public void RemoverFiltroMaterial()
    {
        OnInitializedAsync();
    }


    private void GerarRelatorio()
    {
        if (movEstoqueList.Count() > 0)
        {
            var pxPorMm = 72 / 25.2F;
            var pdf = new Document(PageSize.A4, 15 * pxPorMm, 15 * pxPorMm, 15 * pxPorMm, 20 * pxPorMm);
            var nomeArquivo = $"Movimentação{Guid.NewGuid()}.pdf";
            var caminhoPDF = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $"{nomeArquivo}");
            var arquivo = new FileStream(caminhoPDF, FileMode.Create);
            var writer = PdfWriter.GetInstance(pdf, arquivo);
            pdf.Open();

            var fonteBase = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, false);

            //adiciona um título
            var fonteParagrafo = new iTextSharp.text.Font(fonteBase, 32,
                iTextSharp.text.Font.NORMAL, BaseColor.Black);
            var titulo = new Paragraph("Relatório de Movimentação\n\n", fonteParagrafo);
            titulo.Alignment = Element.ALIGN_LEFT;
            titulo.SpacingAfter = 4;
            pdf.Add(titulo);

            var tabela = new PdfPTable(5);
            float[] larguras = { 0.6f, 2f, 0.6f, 0.6f, 0.6f };
            tabela.SetWidths(larguras);
            tabela.DefaultCell.BorderWidth = 0;
            tabela.WidthPercentage = 100;
            var utils = new Global5.Components.lib.Util.Utils();
            //adiciona os títulos das colunas
            utils.CriarCelulaTexto(tabela, "ID", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Material", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Q. Anterior", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Q. Alterada", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Q. Atual", PdfPCell.ALIGN_LEFT, true);

            foreach (var p in movEstoqueList)
            {
                utils.CriarCelulaTexto(tabela, p.int_id.ToString("D6"), PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p.str_material ?? string.Empty, PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p.int_qtd_anterior.ToString(), PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p.int_qtd_desconto.ToString(), PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p.int_qtd_atual.ToString(), PdfPCell.ALIGN_LEFT);
            }

            pdf.Add(tabela);
            pdf.Close();
            arquivo.Close();

            if (File.Exists(caminhoPDF))
            {
                Process.Start(new ProcessStartInfo()
                    {
                        //Arguments = $"/c start firefox {caminhoPDF}",
                        Arguments = $"/c start {caminhoPDF}",
                        CreateNoWindow = true,
                        FileName = "cmd.exe"
                    });
            }
        }
    }
}
