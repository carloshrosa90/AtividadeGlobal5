@using System.Data.SqlClient
@using Global5.Controllers.Configuration
@using System.Data
@using System.Diagnostics
@using iTextSharp.text
@using iTextSharp.text.pdf

<h3>Material</h3>

<style>
    .borda {
        border: solid
    }
</style>

<div>
    <div style="float:left; width:30%">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <input placeholder="Descrição" type="text" class="form-control mb-md-3" @bind="@materialCad.str_descricao" @bind:event="oninput" />
                        <input placeholder="Valor" type="text" class="form-control mb-md-3" @bind="@materialCad.dec_valor" @bind:event="oninput" />
                        <input placeholder="Estoque Inical" type="text" class="form-control mb-md-3" @bind="@materialCad.int_estoque_incial" @bind:event="oninput" />

                    </td>
                </tr>
                <tr>
                    <td>

                        @if (visibleAdd)
                        {
                            <button visible="@(visibleAdd)" type="submit" @onclick="CadastrarMaterial" class="btn-primary">Cadastrar</button>
                        }
                        else if (visibleEdit)
                        {
                            <button visible="@(visibleEdit)" @onclick="AtualizaMaterial" class="btn-primary">Editar</button>
                        }
                        <br>
                        <button @onclick="(()=> GerarRelatorio())" class="btn-secondary">Relatório</button>

                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div style="float:right; width:70%; padding-left: 10px">
        <table border="1">
            <thead>
                <tr>
                    <th class="borda">Código</th>
                    <th class="borda">Descrição</th>
                    <th class="borda">Valor R$</th>
                    <th class="borda">Estoque Inicial</th>

                    <th class="borda">Edição</th>
                    <th class="borda">Exclusão</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in materialList)
                {
                    <tr>
                        <td class="borda">@item.int_id</td>
                        <td class="borda">@item.str_descricao</td>
                        <td class="borda">@item.dec_valor</td>
                        <td class="borda">@item.int_estoque_incial</td>
                        <td class="borda"> <button @onclick="(() => CarregaFornecedor(item))" class="btn-primary">Editar</button> </td>
                        <td class="borda"> <button @onclick="(() => DeleteMaterial(item.int_id.ToString()))" class="btn-primary">Excluir</button> </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>


@code {
    private bool visibleEdit { get; set; } = true;
    private bool visibleAdd { get; set; } = false;
    private Models.crud.Material? materialCad { get; set; } = new Models.crud.Material();
    private List<Models.crud.Material> materialList = new List<Models.crud.Material>();

    protected override async Task OnInitializedAsync()
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            materialList = new List<Models.crud.Material>();
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ConsultaMaterial", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", null));
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    materialList.Add(new Models.crud.Material
                        {
                            int_id = (int)rdr["int_id"],
                            str_descricao = (string)rdr["str_descricao"],
                            dec_valor = (decimal)rdr["dec_valor"],
                            int_estoque_incial = (int)rdr["int_estoque_incial"]
                        });
                }
            }
        }

        materialCad = new Models.crud.Material();
    }

    private void CadastrarMaterial()
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_CadastraMaterial", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("str_descricao", materialCad?.str_descricao ?? string.Empty));
            cmd.Parameters.Add(new SqlParameter("dec_valor", materialCad?.dec_valor.ToString() ?? "0"));
            cmd.Parameters.Add(new SqlParameter("int_estoque_incial", materialCad?.int_estoque_incial ?? 0));

            cmd.ExecuteReader();
        }

        OnInitializedAsync();
    }

    private void DeleteMaterial(string id)
    {
        try
        {
            visibleAdd = true;
            visibleEdit = false;

            using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("sp_ExcluiMaterial", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("int_id", id));
                cmd.ExecuteReader();
            }
            OnInitializedAsync();
        }
        catch
        {

        }
    }

    private void CarregaFornecedor(Models.crud.Material materialCarrega)
    {
        visibleAdd = false;
        visibleEdit = true;
        materialCad = materialCarrega;
    }

    private void AtualizaMaterial()
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_AtualizaMaterial", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", materialCad?.int_id ?? 0));
            cmd.Parameters.Add(new SqlParameter("str_descricao", materialCad?.str_descricao ?? string.Empty));
            cmd.Parameters.Add(new SqlParameter("dec_valor", materialCad?.dec_valor ?? decimal.Parse("0")));
            cmd.Parameters.Add(new SqlParameter("int_estoque_incial", materialCad?.int_estoque_incial ?? 0));
            cmd.ExecuteReader();
        }
        OnInitializedAsync();
    }


    private void GerarRelatorio()
    {
        if (materialList.Count() > 0)
        {
            var pxPorMm = 72 / 25.2F;
            var pdf = new Document(PageSize.A4, 15 * pxPorMm, 15 * pxPorMm, 15 * pxPorMm, 20 * pxPorMm);
            var nomeArquivo = $"Material{Guid.NewGuid()}.pdf";
            var caminhoPDF = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $"{nomeArquivo}");
            var arquivo = new FileStream(caminhoPDF, FileMode.Create);
            var writer = PdfWriter.GetInstance(pdf, arquivo);
            pdf.Open();

            var fonteBase = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, false);

            //adiciona um título
            var fonteParagrafo = new iTextSharp.text.Font(fonteBase, 32,
                iTextSharp.text.Font.NORMAL, BaseColor.Black);
            var titulo = new Paragraph("Relatório de material\n\n", fonteParagrafo);
            titulo.Alignment = Element.ALIGN_LEFT;
            titulo.SpacingAfter = 4;
            pdf.Add(titulo);

            var tabela = new PdfPTable(4);
            float[] larguras = { 0.6f, 2f, 1.5f, 0.6f };
            tabela.SetWidths(larguras);
            tabela.DefaultCell.BorderWidth = 0;
            tabela.WidthPercentage = 100;
            var utils = new Global5.Components.lib.Util.Utils();
            //adiciona os títulos das colunas
            utils.CriarCelulaTexto(tabela, "ID", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Descição", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Valor", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Est. Inicial", PdfPCell.ALIGN_LEFT, true);

            foreach (var p in materialList)
            {
                utils.CriarCelulaTexto(tabela, p.int_id.ToString("D6"), PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p?.str_descricao ?? string.Empty, PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p?.dec_valor.ToString() ?? "0", PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p?.int_estoque_incial?.ToString() ?? "0", PdfPCell.ALIGN_LEFT);
            }

            pdf.Add(tabela);
            pdf.Close();
            arquivo.Close();

            if (File.Exists(caminhoPDF))
            {
                Process.Start(new ProcessStartInfo()
                    {
                        //Arguments = $"/c start firefox {caminhoPDF}",
                        Arguments = $"/c start {caminhoPDF}",
                        CreateNoWindow = true,
                        FileName = "cmd.exe"
                    });
            }

        }
    }

}
