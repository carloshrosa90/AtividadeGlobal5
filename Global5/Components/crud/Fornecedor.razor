@using System.Data.SqlClient
@using Global5.Controllers.Configuration
@using System.Data

<h3>Fornecedor</h3>


<div>
    <div style="float:left; width:30%">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <input placeholder="Nome" type="text" class="form-control mb-md-3" @bind="@fornecedorCad.str_nome" @bind:event="oninput" />
                        <input placeholder="Email" type="text" class="form-control mb-md-3" @bind="@fornecedorCad.str_email" @bind:event="oninput" />
                    </td>
                </tr>
                <tr>
                    <td> <button type="submit" @onclick="CadastrarFornecedor" class="btn-primary">@strButton</button> </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div style="float:right; width:70%; padding-left: 10px"> 
        <table>
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Nome</th>
                    <th>E-mail</th>
                    <th>Edição</th>
                    <th>Exclusão</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in fornecedorList)
                {
                    <tr>
                        <th>@item.int_id</th>
                        <td>@item.str_nome</td>
                        <td>@item.str_email</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>



@code {


    private string strButton { get; set; } = "Cadastrar";
    private Models.crud.Fornecedor? fornecedorCad { get; set; } = new Models.crud.Fornecedor();
    private List<Models.crud.Fornecedor> fornecedorList = new List<Models.crud.Fornecedor>();

    protected override async Task OnInitializedAsync()
    {
        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            fornecedorList = new List<Models.crud.Fornecedor>();
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ConsultaFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", null));
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    fornecedorList.Add(new Models.crud.Fornecedor
                    {
                            int_id = (int)rdr["int_id"],
                            str_email = (string)rdr["str_nome"],
                            str_nome = (string)rdr["str_email"]
                    });
                }
            }
        }

        fornecedorCad = new Models.crud.Fornecedor();
    }

    private void CadastrarFornecedor()
    {
        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_CadFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("str_nome", fornecedorCad?.str_nome ?? string.Empty));
            cmd.Parameters.Add(new SqlParameter("str_email", fornecedorCad?.str_email ?? string.Empty));
            cmd.ExecuteReader();
        }

        OnInitializedAsync();
    }

    private void DeleteFornecedor()
    {
        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_DeleteFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", fornecedorCad?.int_id ?? 0));
            cmd.ExecuteReader();
        }
        OnInitializedAsync();
    }

    private void AtualizaFornecedor()
    {
        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_AtualizaFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", fornecedorCad?.int_id ?? 0));
            cmd.Parameters.Add(new SqlParameter("str_nome", fornecedorCad?.str_nome ?? string.Empty));
            cmd.Parameters.Add(new SqlParameter("str_email", fornecedorCad?.str_email ?? string.Empty));
            cmd.ExecuteReader();
        }
        OnInitializedAsync();
    }
}
