@using System.Data.SqlClient
@using Global5.Controllers.Configuration
@using System.Data
@using System.IO
@using System.Diagnostics
@using iTextSharp.text
@using iTextSharp.text.pdf

<h3>Fornecedor</h3>


<div>
    <div style="float:left; width:30%">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <input placeholder="Nome" type="text" class="form-control mb-md-3" @bind="@fornecedorCad.str_nome" @bind:event="oninput" />
                        <input placeholder="Email" type="text" class="form-control mb-md-3" @bind="@fornecedorCad.str_email" @bind:event="oninput" />
                    </td>
                </tr>
                <tr>
                    <td>
                        @if (visibleAdd)
                        {
                            <button visible="@(visibleAdd)" type="submit" @onclick="CadastrarFornecedor" class="btn-primary">Cadastrar</button>
                        }
                        else if (visibleEdit)
                        {
                            <button visible="@(visibleEdit)" @onclick="AtualizaFornecedor" class="btn-primary">Editar</button>
                        }

                        <button @onclick="(()=> GerarRelatorio())" class="btn-secondary">Relatório</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div style="float:right; width:70%; padding-left: 10px">
        <table border="1">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Nome</th>
                    <th>E-mail</th>
                    <th>Edição</th>
                    <th>Exclusão</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in fornecedorList)
                {
                    <tr>
                        <th>@item.int_id</th>
                        <td>@item.str_nome</td>
                        <td>@item.str_email</td>
                        <td> <button @onclick="(() => CarregaFornecedor(item))" class="btn-primary">Editar</button> </td>
                        <td>
                            <button @onclick="(() => DeleteFornecedor(item.int_id.ToString()))" class="btn-primary">Excluir</button>
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>



@code {
    private bool visibleEdit { get; set; } = true;
    private bool visibleAdd { get; set; } = false;

    private string strButton { get; set; } = "Cadastrar";
    private Models.crud.Fornecedor? fornecedorCad { get; set; } = new Models.crud.Fornecedor();
    private List<Models.crud.Fornecedor> fornecedorList = new List<Models.crud.Fornecedor>();

    protected override async Task OnInitializedAsync()
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            fornecedorList = new List<Models.crud.Fornecedor>();
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_ConsultaFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", null));
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    fornecedorList.Add(new Models.crud.Fornecedor
                        {
                            int_id = (int)rdr["int_id"],
                            str_nome = (string)rdr["str_nome"],
                            str_email = (string)rdr["str_email"]
                        });
                }
            }
        }

        fornecedorCad = new Models.crud.Fornecedor();
    }

    private void CadastrarFornecedor()
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_CadFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("str_nome", fornecedorCad?.str_nome ?? string.Empty));
            cmd.Parameters.Add(new SqlParameter("str_email", fornecedorCad?.str_email ?? string.Empty));
            cmd.ExecuteReader();
        }

        OnInitializedAsync();
    }

    private void DeleteFornecedor(string id)
    {
        visibleAdd = true;
        visibleEdit = false;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_DeleteFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", id));
            cmd.ExecuteReader();
        }
        OnInitializedAsync();
    }

    private void CarregaFornecedor(Models.crud.Fornecedor fornecedorCarrega)
    {
        visibleAdd = false;
        visibleEdit = true;
        fornecedorCad = fornecedorCarrega;
    }

    private void AtualizaFornecedor()
    {
        visibleAdd = true;
        visibleEdit = false;

        if (fornecedorCad == null)
            return;

        using (SqlConnection conn = new SqlConnection(ConfigurationBase.ConnectionString))
        {
            conn.Open();
            SqlCommand cmd = new SqlCommand("sp_AtualizaFornecedor", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("int_id", fornecedorCad?.int_id ?? 0));
            cmd.Parameters.Add(new SqlParameter("str_nome", fornecedorCad?.str_nome ?? string.Empty));
            cmd.Parameters.Add(new SqlParameter("str_email", fornecedorCad?.str_email ?? string.Empty));
            cmd.ExecuteReader();
        }
        OnInitializedAsync();
    }



    private void GerarRelatorio()
    {
        if (fornecedorList.Count() > 0)
        {
            var pxPorMm = 72 / 25.2F;
            var pdf = new Document(PageSize.A4, 15 * pxPorMm, 15 * pxPorMm, 15 * pxPorMm, 20 * pxPorMm);
            var nomeArquivo = $"Fornecedor{Guid.NewGuid()}.pdf";
            var caminhoPDF = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, $"{nomeArquivo}");
            var arquivo = new FileStream(caminhoPDF, FileMode.Create);
            var writer = PdfWriter.GetInstance(pdf, arquivo);
            pdf.Open();

            var fonteBase = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, false);

            //adiciona um título
            var fonteParagrafo = new iTextSharp.text.Font(fonteBase, 32,
                iTextSharp.text.Font.NORMAL, BaseColor.Black);
            var titulo = new Paragraph("Relatório de Fornecedor\n\n", fonteParagrafo);
            titulo.Alignment = Element.ALIGN_LEFT;
            titulo.SpacingAfter = 4;
            pdf.Add(titulo);

            var tabela = new PdfPTable(3);
            float[] larguras = { 0.6f, 2f, 1.5f };
            tabela.SetWidths(larguras);
            tabela.DefaultCell.BorderWidth = 0;
            tabela.WidthPercentage = 100;
            var utils = new Global5.Components.lib.Util.Utils();
            //adiciona os títulos das colunas
            utils.CriarCelulaTexto(tabela, "ID", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "Nome", PdfPCell.ALIGN_LEFT, true);
            utils.CriarCelulaTexto(tabela, "E-mail", PdfPCell.ALIGN_LEFT, true);

            foreach (var p in fornecedorList)
            {
                utils.CriarCelulaTexto(tabela, p.int_id.ToString("D6"), PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p.str_nome ?? string.Empty, PdfPCell.ALIGN_LEFT);
                utils.CriarCelulaTexto(tabela, p.str_email ?? string.Empty, PdfPCell.ALIGN_LEFT);
            }

            pdf.Add(tabela);
            pdf.Close();
            arquivo.Close();

            if (File.Exists(caminhoPDF))
            {
                Process.Start(new ProcessStartInfo()
                    {
                        //Arguments = $"/c start firefox {caminhoPDF}",
                        Arguments = $"/c start {caminhoPDF}",
                        CreateNoWindow = true,
                        FileName = "cmd.exe"
                    });
            }

        }
    }
}
